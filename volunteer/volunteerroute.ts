import { Router, Request, Response } from "express"
import { VolunteerService } from "../services/volunteerservice"
import { authMiddleware, requireAdmin } from "../middleware/authmiddleware"

const router = Router()

// Interfaces pour typer les donnÃ©es reÃ§ues dans les requÃªtes 
interface CreateVolunteerRequest {
    firstname: string
    lastname: string 
    email: string 
    phone: string 
    city: string 
    age: number
    motivation?: string 
    experience?: string 
    availability?: string 
    skills?: string 
}

interface UpdateVolunteerRequest {
    firstname: string
    lastname: string 
    email: string 
    phone: string 
    city: string 
    age: number
    motivation?: string 
    experience?: string 
    availability?: string 
    skills?: string 
    status?: string 
}

interface SearchVolunteerRequest {
    city?: string 
    status?: string 
    minAge?: string 
    maxAge?:string 
    skills: string 
}

/* ----------------------- ROUTES PUBLIQUES -----------------
ResponsabilitÃ© : Permettre Ã  toute personne de postuler comme bÃ©nÃ©vole
Validation des donnÃ©es d'entrÃ©e + crÃ©ation de la candidature */

router.post('/apply', async (req: Request, res: Response) => {
    try {
        const { firstname, lastname, email, phone, city, age, motivation, experience, availability, skills } = req.body as CreateVolunteerRequest 

        // Validation des champs obligatoires 
        if (!firstname || !lastname || !email || !phone ||!city) {
            return res.status(400).json({
                success: false,
                message: 'Tous les champs obligatoires doivent Ãªtre renseignÃ©es (firstname, lastname, email, phone, city:'
            })
        }

        // Validation de l'Ã¢ge 
        if (age === undefined ||age === null) {
            return res.status(400).json({
                success: false,
                message: 'L\'Ã¢ge est obligatoire'
            })
        }

        // Validation avec les mÃ©thodes centralisÃ©es du service 
        if (!VolunteerService.isValidEmail(email)) {
            return res.status(400).json({
                success: false,
                message: 'Format d\'email invalide'
            })
        }

        if (!VolunteerService.isValidPhone(phone)) {
            return res.status(400).json({
                success: false,
                message: 'Format de tÃ©lÃ©phone invalide (format franÃ§ais attentu)'
            })
        }

        const firstnameValidation = VolunteerService.isValidName(firstname)
        if (!firstnameValidation.valid) {
            return res.status(400).json({
                success: false,
                message: `PrÃ©nom invalide: ${firstnameValidation.message}`
            })
        }

        const lastnameValidation = VolunteerService.isValidName(lastname)
        if (!lastnameValidation.valid) {
            return res.status(400).json({
                success: false, 
                message: `Nom invalide: ${lastnameValidation.message}`
            })
        }

        const ageValidation = VolunteerService.isValidAge(age)
        if (!ageValidation.valid) {
            return res.status(400).json({
                success: false,
                message: ageValidation.message
            })
        }

        // DÃ©lÃ©gation de toute la logique mÃ©tier au service 
        const volunteer = await VolunteerService.createVolunteerApplication({
            firstname: firstname.trim(),
            lastname: lastname.trim(),
            email: email.trim().toLowerCase(),
            phone: phone.trim(),
            city: city.trim(),
            age,
            motivation: motivation?.trim(),
            experience: experience?.trim(),
            availability: availability?.trim(),
            skills: skills?.trim()
        }) 

        res.status(201).json({
            success: true, 
            message: 'Votre candidature de bÃ©nÃ©volat a Ã©tÃ© soumis avec succÃ¨s ! Nous vous recontacterons prochainement.',
            data: {
                id: volunteer.id,
                firstname: volunteer.firstname,
                lastname: volunteer.lastname,
                email: volunteer.email,
                status: volunteer.status,
                createdAt: volunteer.createdAt
            }
        })
    } catch (error) {
        console.error('Erreur lors de la soumission de la candidature', error)

        // Gestion des erreurs mÃ©tier retournÃ©es par le service 
        if (error instanceof Error && error.message.includes('existe dÃ©jÃ ')) {
            return res.status(409).json({
                success: false,
                message: error.message
            })
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la soumission de votre candidature',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸŸ¢ ROUTE PUBLIQUE - VÃ©rifier le statut d'une candidature par email
ResponsabilitÃ© : Permettre aux candidats de vÃ©rifier le statut de leur candidature*/

router.get('/status/:email', async (req: Request, res: Response) => {
    try {
        const email = req.params.email 

        if (!VolunteerService.isValidEmail(email)) {
            return res.status(400).json({
                success: false,
                message: 'Format d\'email invalide'
            })
        }

        const volunteer = await VolunteerService.getVolunteerByEmail(email)

        // Ne retourne que les informations non sensibles 
        res.json({
            success: true, 
            data: {
                firstname: volunteer.firstname,
                lastname: volunteer.lastname,
                email: volunteer.email,
                status: volunteer.status,
                createdAt: volunteer.createdAt
            }
        })
    } catch (error) {
        console.error('Erreur lors de la vÃ©rification du statut:', error)

        if (error instanceof Error && error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©') {
            return res.status(404).json({
                success: false,
                message: 'Aucune candidature trouvÃ©e avec cet email'
            })
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la vÃ©rification du statut',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ---------------------- ROUTES ADMIN (ProtÃ©gÃ©es) -------------------------
ResponsabilitÃ© : Afficher toutes les candidatures de bÃ©nÃ©volat pour l'administration*/

router.get('/admin/all', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteers = await VolunteerService.getAllVolunteers()

        res.json({
            success: true,
            message: 'Liste des candidatures rÃ©cupÃ©rÃ©e avec succÃ¨s',
            data: volunteers 
        })
    } catch (error) {
        console.error('Erreur lors de la rÃ©cupÃ©ration des candidatures', error)

        res.status(500).json({
            succes: false,
            message: 'Erreur lors de la rÃ©cupÃ©ration des candidatures',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined 
        })
    }
})

/* ðŸ”’ Routes ProtÃ©gÃ©e Admin : Lister les candidatures par statut 
Resp : Filtrer les candidatures selon leur statut (pending/approved/rejected)*/ 

router.get('/admin/status/:status', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const status = req.params.status
        const volunteers = await VolunteerService.getVolunteersByStatus(status)

        res.json({
            success: true,
            message: `Candidatures avec le statut "${status}" rÃ©cupÃ©rÃ©es avec succÃ¨s`, 
            data: volunteers
        })
    } catch (error) {
        console.error('Erreur lors de la rÃ©cupÃ©ration par statut:', error)

        if (error instanceof Error && error.message.includes('Statut invalide')) {
            return res.status(400).json({
                success: false,
                message: error.message 
            })
        }

        res.status(500).json({
            success: false, 
            message: 'Erreur lors de la rÃ©cupÃ©ration des candidatures', 
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined 
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - RÃ©cupÃ©rer une candidature par ID
ResponsabilitÃ© : Afficher les dÃ©tails complets d'une candidature spÃ©cifique*/

router.get('/admin/:id', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id)

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                success: false,
                message: 'ID de candidature invalide'
            })
        }

        const volunteer = await VolunteerService.getVolunteerById(volunteerId)

        res.json({
            success: true,
            data: volunteer 
        })
    } catch (error) {
        console.error('Erreur lors de la rÃ©cupÃ©ration de la candidature:', error)

        if (error instanceof Error && error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {return res.status(404).json({
            success: false,
            message: error.message 
        })
    }
    
    res.status(500).json({
        success: false,
        message: 'Erreur lors de la rÃ©cupÃ©ration de la candidature', 
        error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
    })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Approuver une candidature
ResponsabilitÃ© : Marquer une candidature comme approuvÃ©e*/

router.patch('/admin/:id/approve', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id) 

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                success: false,
                message: 'ID de candidature invalide'
            })
        }

        const volunteer = await VolunteerService.approveVolunteer(volunteerId)

        res.json({
            success: true,
            message: 'Candidature approuvÃ©e avec succÃ¨s', 
            data: volunteer 
        })
    } catch (error) {
        console.error('Erreur lors de l\'approbation:', error) 

        if (error instanceof Error) {
            if (error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {
                return res.status(404).json({
                    success: false,
                    message: error.message
                })
            }
            if (error.message.includes('dÃ©jÃ  approuvÃ©e')) {
                return res.status(400).json({
                    success: false,
                    message: error.message 
                })
            }
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors de l\'approbation de la candidature',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Rejeter une candidature
ResponsabilitÃ© : Marquer une candidature comme rejetÃ©e*/

router.patch('/admin/:id/reject', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id) 

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                    success: false,
                    message: 'ID de candidature invalide'
                
            })
        }

        const volunteer = await VolunteerService.rejectVolunteer(volunteerId)

        res.json({
            success: true,
            message: 'Candidature rejetÃ©e',
            data: volunteer
        })

    } catch (error) {
        console.error('Erreur lors du rejet:', error)

        if (error instanceof Error) {
            if (error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {
                return res.status(404).json({
                    success: false,
                    message: error.message 
                })
            }
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors du rejet de la candidature',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Remettre en attente une candidature
ResponsabilitÃ© : Remettre le statut d'une candidature Ã  "pending"*/

router.patch('/admin/:id/pending', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id) 

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                success: false,
                message: 'ID de candidature invalide'
            })
        }

        const volunteer = await VolunteerService.setPendingVolunteer(volunteerId)

        res.json({
            success: true,
            message: 'Candidature remise en attente', 
            data: volunteer
        })
    } catch (error) {
        console.error('Erreur lors de la remise en attente:', error)

        if (error instanceof Error && error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {
            return res.status(404).json({
                success: false, 
                message: error.message
            })
        }
        
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la remise en attente',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Mettre Ã  jour une candidature
ResponsabilitÃ© : Permettre aux admins de modifier les informations d'une candidature*/
router.put('/admin/:id', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id)
        const updateData = req.body as UpdateVolunteerRequest

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                success: false,
                message: 'ID de candidature invalide'
            })
        }

        // VÃ©rifier qu'au moins un champ est fourni pour la mise Ã  jour 
        const hasData = Object.keys(updateData).length > 0
        if (!hasData) {
            return res.status(400).json({
                success: false,
                message: 'Vous devez fournir au moins un champ Ã  mettre Ã  jour'
            })
        }

        // Validations si les champs sont modifiÃ©s 
       if (updateData.email && !VolunteerService.isValidEmail(updateData.email)) {
            return res.status(400).json({
                success: false,
                message: 'Format d\'email invalide'
            })
        }

        if (updateData.phone && !VolunteerService.isValidPhone(updateData.phone)) {
            return res.status(400).json({
                success: false,
                message: 'Format de tÃ©lÃ©phone invalide'
            })
        }

        if (updateData.firstname && !VolunteerService.isValidName(updateData.firstname).valid) {
            return res.status(400).json({
                success: false,
                message: VolunteerService.isValidName(updateData.firstname).message
            })
        }

        if (updateData.lastname && !VolunteerService.isValidName(updateData.lastname).valid) {
            return res.status(400).json({
                success: false,
                message: VolunteerService.isValidName(updateData.lastname).message
            })
        }

        if (updateData.age && !VolunteerService.isValidAge(updateData.age).valid) {
            return res.status(400).json({
                success: false,
                message: VolunteerService.isValidAge(updateData.age).message
            })
        }
        
        const updatedVolunteer = await VolunteerService.updateVolunteer(volunteerId, updateData)

        res.json({
            success: true,
            message: 'Candidature mise Ã  jour avec succÃ¨s',
            data: updatedVolunteer
        })
    } catch (error) {
        console.error('Erreur lors de la mise Ã  jour:', error)

        if (error instanceof Error) {
            if (error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {
                return res.status(404).json({
                    success: false,
                    message: error.message 
                })
            }
            if (error.message.includes('existe dÃ©jÃ ')) {
                return res.status(409).json({
                    success: false, 
                    message: error.message 
                })
            }
            if (error.message.includes('Statut invalide')) {
                return res.status(400).json({
                    success: false,
                    message: error.message 
                })
            }
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la mise Ã  jour de la candidature', 
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Supprimer une candidature
ResponsabilitÃ© : Supprimer dÃ©finitivement une candidature du systÃ¨me*/

router.delete('/admin/:id', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const volunteerId = parseInt(req.params.id) 

        if (isNaN(volunteerId)) {
            return res.status(400).json({
                success: false,
                message: 'ID de candidature invalide'
            })
        }

        const result = await VolunteerService.deleteVolunteer(volunteerId)

        res.json({
            success: true,
            message: result.message 
        })
    } catch (error) {
        console.error('Erreur lors de la suppression:', error)

        if (error instanceof Error && error.message === 'Candidature de bÃ©nÃ©volat non trouvÃ©e') {
            return res.status(404).json({
                success: false,
                message: error.message
            })
        }

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la suppression de la candidature', 
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined 
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Rechercher des candidatures
ResponsabilitÃ© : Recherche avancÃ©e avec filtres pour l'administration*/
router.get('/admin/search', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const city = req.query.city as string | undefined
        const status = req.query.status as string | undefined  
        const minAge = req.query.minAge as string | undefined
        const maxAge = req.query.maxAge as string | undefined
        const skills = req.query.skills as string | undefined

        // Validation et conversion des paramÃ¨tres 
        const filters: any = {}

        if (city) filters.city = city
        if (status) filters.status = status 
        if (skills) filters.skills = skills 

        // Conversion des Ã¢ges en nombres si fournis 
        if (minAge) {
            const minAgeNum = parseInt(minAge)
            if (isNaN(minAgeNum) || minAgeNum < 0) {
                return res.status(400).json({
                    success: false,
                    message: 'L\'Ã¢ge minimum doit Ãªtre un nombre positif'
                })
            }
            filters.minAge = minAgeNum 
        }

        if (maxAge) {
            const maxAgeNum = parseInt(maxAge)
            if (isNaN(maxAgeNum) ||maxAgeNum < 0) {
                return res.status(400).json({
                    success: false,
                    message: 'L\'Ã¢ge maximum doit Ãªtre un nombre positif'
                })
            }
            filters.maxAge = maxAgeNum 
        }

        // VÃ©rifier la cohÃ©rence des Ã¢ges 
        if (filters.minAge && filters.maxAge && filters.minAge > filters.maxAge) {
            return res.status(400).json({
                success: false,
                message: 'L\'Ã¢ge minimum ne peut pas Ãªtre supÃ©rieur Ã  l\'Ã¢ge maximum'
            })
        }

        const volunteers = await VolunteerService.searchVolunteers(filters)

        res.json({
            success: true,
            message: `${volunteers.length} candidature(s) trouvÃ©e(s)`, 
            data: volunteers,
            filters: filters
        })
    } catch (error) {
        console.error('Erreur lors de la recherche.', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la recherche de candidatures',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* ðŸ”’ ROUTE PROTÃ‰GÃ‰E ADMIN - Statistiques des bÃ©nÃ©voles
ResponsabilitÃ© : Fournir un dashboard avec les statistiques des candidatures*/
router.get('/admin/stats', authMiddleware, requireAdmin, async (req: Request, res: Response) => {
    try {
        const stats = await VolunteerService.getAllVolunteers()

        res.json({
            success: true,
            message: 'Statistiques des bÃ©nÃ©voles rÃ©cupÃ©rÃ©es avec succÃ¨s', 
            data: stats 
        })

    } catch (error) {
        console.error('Erreur lors de la rÃ©cupÃ©ration des statistiques', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la rÃ©cupÃ©ration des statistiques',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})


export default router 



/* 
ðŸŸ¢ Routes Publiques (pour les candidats)
- POST /aply = Soumettre sa candidature de bÃ©nÃ©volat 
- GET /status/:email - VÃ©rifier le statut de sa candidature 


ðŸ”’ Routes Admin (pour l'administration) 
- GET /admin/all - Toutes les candidatures 
- GET /admin/status/:status - Filtrer par statut (pending/approved/rejected)
- /admin/:id - DÃ©tails d'une candidature 
- PUT /admin/:id - Modifier une candidature 

Action sur les candidatures : 
- PATCH /admin/:id/approve - Approuver 
- PATCH /admin/:id/reject - Rejeter 
- PATCH /admin/:id/pending - Remettre en attente 
- DELETE /admin/:id - supprimer 

Outils d'administration : 
- GET /admin/search - Recherche avancÃ©e avec filtres 
- GET /admin/stats - Statistiques pour dashboard 

âœ¨ FonctionnalitÃ©s clÃ©s :

âœ… Validation complÃ¨te (email, tÃ©lÃ©phone franÃ§ais, Ã¢ge, noms)
âœ… Gestion des doublons d'email
âœ… Messages d'erreur explicites
âœ… Recherche avec filtres (ville, Ã¢ge, compÃ©tences, statut)
âœ… Protection des donnÃ©es (seules les infos nÃ©cessaires pour le statut public)

*/