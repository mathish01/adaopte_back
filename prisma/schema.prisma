generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstname String    @db.VarChar(100)
  lastname  String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  phone     String?   @db.VarChar(20)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  role      String?   @default("user") @db.VarChar(50)
  adopt     Adopt[]   // Seule source de vérité pour les adoptions
  donations Donation[]
  contacts Contact[]
  
  @@map("users")
}

model Animal {
  id          Int       @id @default(autoincrement())
  type        String    @db.VarChar(100)
  description String?
  name        String    @db.VarChar(100)
  city        String    @db.VarChar(100)
  age         Int
  breed       String    @db.VarChar(100)
  status      String    @default("available") @db.VarChar(50) // available, adopted, pending
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  adopt       Adopt[]   // Relation avec les adoptions

  @@map("animals")
}

model Adopt {
  id        Int       @id @default(autoincrement())
  userid    Int
  animalid  Int       // Nouvelle clé étrangère vers Animal
  firstname String    @db.VarChar(100)
  lastname  String    @db.VarChar(100)
  phone     String    @db.VarChar(20)
  status    String    @default("pending") @db.VarChar(50) // pending, approved, rejected
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  user      String?   @db.VarChar(255)
  
  // Relations
  users     User      @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  animal    Animal    @relation(fields: [animalid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("adopt")
}

model Volunteer {
  id          Int       @id @default(autoincrement())
  firstname   String    @db.VarChar(100)
  lastname    String    @db.VarChar(100)
  email       String    @unique @db.VarChar(255)
  phone       String    @db.VarChar(20)
  city        String    @db.VarChar(100)
  age         Int
  motivation  String?   // Pourquoi veux-tu être bénévole ?
  experience  String?   // Expérience avec les animaux
  availability String?  // Disponibilités
  skills      String?   // Compétences particulières
  status      String    @default("pending") @db.VarChar(50)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("volunteers")
}

model Donation {
  id            Int       @id @default(autoincrement())
  userid        Int?      // Optionnel car un anonyme peut donner
  firstname     String    @db.VarChar(100)
  lastname      String    @db.VarChar(100)
  email         String    @db.VarChar(255)
  phone         String?   @db.VarChar(20)
  amount        Decimal   @db.Decimal(10, 2) // Montant du don
  message       String?   // Message optionnel du donateur
  isAnonymous   Boolean   @default(false) // Si le don est anonyme
  paymentMethod String?   @db.VarChar(50) // stripe, paypal, etc.
  paymentId     String?   @db.VarChar(255) // ID de transaction
  status        String    @default("pending") @db.VarChar(50) // pending, completed, failed, refunded
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  

  user          User?     @relation(fields: [userid], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("donations")
}

model Contact {
  id        Int       @id @default(autoincrement())
  userid    Int?      // Optionnel si utilisateur connecté
  firstname String    @db.VarChar(100)
  lastname  String    @db.VarChar(100)
  email     String    @db.VarChar(255)
  phone     String?   @db.VarChar(20)
  subject   String    @db.VarChar(200) // Sujet du message
  message   String    // Message complet
  status    String    @default("new") @db.VarChar(50) // new, read, replied, closed
  priority  String    @default("normal") @db.VarChar(50) // low, normal, high, urgent
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  repliedAt DateTime? @map("replied_at") @db.Timestamp(6)
  
  // Relation optionnelle avec User (pour les utilisateurs connectés)
  user      User?     @relation(fields: [userid], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("contacts")
}