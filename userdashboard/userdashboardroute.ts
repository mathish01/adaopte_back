import { Router, Request, Response } from "express"
import { authMiddleware } from "../middleware/authmiddleware"
import { UserDashboardService } from "../services/userdashboardservice"

const router = Router()

// ====================== ROUTES DASHBOARD UTILISATEUR ======================

/* üîí ROUTE PROT√âG√âE UTILISATEUR - Dashboard complet
Responsabilit√© : R√©cup√©rer toutes les donn√©es du dashboard utilisateur
Inclut dons de l'ann√©e + adoptions + statistiques */

router.get('/dashboard', authMiddleware, async (req: Request, res: Response) => {
    try {
        const userId = req.user!.userId

        const result = await UserDashboardService.getUserDashboard(userId)

        if (result.success) {
            return res.status(200).json({
                success: true,
                message: 'Dashboard r√©cup√©r√© avec succ√®s',
                data: result.data
            })
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            })
        }
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du dashboard:', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration du dashboard',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* üîí ROUTE PROT√âG√âE UTILISATEUR - Mes dons par ann√©e
Responsabilit√© : R√©cup√©rer les dons d'une ann√©e sp√©cifique
Permet de voir l'historique sur plusieurs ann√©es */

router.get('/dashboard/donations', authMiddleware, async (req: Request, res: Response) => {
    try {
        const userId = req.user!.userId
        const year = req.query.year ? parseInt(req.query.year as string) : undefined

        // Validation de l'ann√©e si fournie
        if (year && (isNaN(year) || year < 2020 || year > new Date().getFullYear() + 1)) {
            return res.status(400).json({
                success: false,
                message: 'Ann√©e invalide'
            })
        }

        const result = await UserDashboardService.getUserDonations(userId, year)

        if (result.success) {
            return res.status(200).json({
                success: true,
                message: 'Dons r√©cup√©r√©s avec succ√®s',
                data: result.data
            })
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            })
        }
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des dons:', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration des dons',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* üîí ROUTE PROT√âG√âE UTILISATEUR - Mes adoptions
Responsabilit√© : R√©cup√©rer toutes les adoptions de l'utilisateur
Avec les d√©tails des animaux */

router.get('/dashboard/adoptions', authMiddleware, async (req: Request, res: Response) => {
    try {
        const userId = req.user!.userId

        const result = await UserDashboardService.getUserAdoptions(userId)

        if (result.success) {
            return res.status(200).json({
                success: true,
                message: 'Adoptions r√©cup√©r√©es avec succ√®s',
                data: result.data
            })
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            })
        }
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des adoptions:', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration des adoptions',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

/* üîí ROUTE PROT√âG√âE UTILISATEUR - Statistiques rapides
Responsabilit√© : R√©cup√©rer un r√©sum√© rapide pour widgets/cartes
Plus l√©ger que le dashboard complet */

router.get('/dashboard/stats', authMiddleware, async (req: Request, res: Response) => {
    try {
        const userId = req.user!.userId

        const result = await UserDashboardService.getUserQuickStats(userId)

        if (result.success) {
            return res.status(200).json({
                success: true,
                message: 'Statistiques r√©cup√©r√©es avec succ√®s',
                data: result.data
            })
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            })
        }
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des statistiques:', error)

        res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration des statistiques',
            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        })
    }
})

export default router